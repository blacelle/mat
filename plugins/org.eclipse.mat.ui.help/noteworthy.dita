<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2008, 2013 SAP AG and others.
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        SAP AG - initial API and implementation
 -->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd" >
<reference id="ref_noteworthy" xml:lang="en-us">
	<title>New and Noteworthy</title>
	<shortdesc>Here are descriptions of some of the more interesting or
		significant changes made to the Memory Analyzer for the 1.3 release.
	</shortdesc>
	<prolog>
		<copyright>
			<copyryear year=""></copyryear>
			<copyrholder>
				Copyright (c) 2008, 2013 SAP AG and others.
			    All rights reserved. This program and the accompanying materials
			    are made available under the terms of the Eclipse Public License v1.0
			    which accompanies this distribution, and is available at
			    http://www.eclipse.org/legal/epl-v10.html
			</copyrholder>
		</copyright>
	</prolog>
	<refbody>
		<section>
			<title>Support for Multiple Snapshots in One Heap Dump File</title>
			<p>
			Occasionally heap dumps files can be generated which contain multiple heap dumps snapshots.
			If an HPROF dump is generated using 
			<codeblock>-agentlib:hprof=heap=dump,format=b</codeblock>
			then if a heap dump is triggered multiple times all the heap dumps will be written to one file.
			An IBM z/OS system dump can contain data from multiple address spaces and processes.
			It is therefore possible that the dump file contains heap dump snapshots from multiple Java runtimes.
			</p>
			<p>
			Memory Analyzer 1.2 and earlier handled this situation by choosing the first heap dump snapshot found unless another
			was selected via an environment variable or MAT DTFJ configuration option.
			</p>
			<p>
			Memory Analyzer 1.3 handles this situation by detecting the multiple dumps, then presenting a dialog
			for the user to select the required snapshot.
			</p>
			<image href="mimes/multiple_snapshots.png">
			<alt>Choose a snapshot to be analyzed</alt>
			</image>
			<p>
			Further details can be found in the documentation under "Acquiring Heap Dumps"
			</p>
		</section>
		
		<section>
			<title>Improved Autocompletion in the OQL Editor</title>
			<p>The autocompletion capabilities have been extended.
			</p>
			<p>
			Autocompletion
			for <keyword>SELECT</keyword> and <keyword>WHERE</keyword> clauses 
			can also supply field names. The class
			for the field names is selected in the <keyword>FROM</keyword> clause by typing space
			after the class name. This brings up a context information box, and
			selects that class as the active class for field names.
			<image href="mimes/oql_completion3.png" align="left" placement="break">
			</image>
			Suggestions are then provided in the <keyword>SELECT</keyword> or
			<keyword>WHERE</keyword> clauses on typing '.' or '@' or control-space.
			<image href="mimes/oql_completion4.png" align="left" placement="break">
			</image>
			Attributes begin with '@' and the autocompletion is filtered based on
			what has been typed so far.
			<image href="mimes/oql_completion5.png" align="left" placement="break">
			</image>
			In <keyword>SELECT</keyword> and <keyword>WHERE</keyword> clauses there are also suggestions for methods on
			key Memory Analyzer objects representing contents of the snapshot.
			<image href="mimes/oql_completion6.png" align="left" placement="break">
            </image>
            Pressing enter adds the selected text to the command window.
            <image href="mimes/oql_completion7.png" align="left" placement="break">
            </image>
            </p>
		</section>
		<section>
			<title>OQL - Accessing Objects by Index in Arrays and Lists</title>
			<p>
				The OQL syntax was extended to support accessing objects inside arrays and Lists by using an index.  
				Here some examples:
			</p>
			<p>
			Reading values from primitive arrays:
			<codeblock>SELECT s[2] FROM int[] s WHERE (s.@length > 2)</codeblock>
			</p>
			<p>
			Reading values from object arrays:
			<codeblock>SELECT s[2] FROM java.lang.Object[] s WHERE (s.@length > 2)</codeblock>
			</p>
			<p>
			Reading values from lists:
			<codeblock>SELECT s.@GCRoots.subList(1,3)[1] FROM OBJECTS ${snapshot} s</codeblock>
			</p>
			<p>For further details see "Reference / OQL Syntax / Property Accessors" in the Memory Analyzer documentation
			</p>

		</section>
		<section>
			<title>Reusing OQL Results</title>
			<p>
				It is now easier to reuse the results of executed OQL queries 
			</p>
			<p>
				The navigation history shows previous OQL queries. Clicking on a previous query 
				executes it again. On many result panes, selecting some objects, then
				<menucascade>
				<uicontrol>Copy</uicontrol>
				<uicontrol>OQL Query</uicontrol>
				</menucascade>
				copies an OQL representation of the objects. This OQL can then be pasted
				into the OQL editor text area.  
				This works from the OQL result area itself, and also copies the column details as well as the objects.
			</p>
			<p>
				<image href="mimes/oqlsaveresult.png" alt="screen shot of OQL navigation and copy OQL query"/>
			</p>
		</section>
		<section>
			<title>Support for Huge Heap Dumps</title>
			<p>
				Older versions of MAT had limitations on the number of objects in the heap (caused by some internal structures used).
				This is reworked, and there were reports of successfully processing a 48 GB / 900 million+ objects heap dump.
			</p>
		</section>
		<section>
			<title>Performance Improvements</title>
			<p>An issue where parsing a dump with more than 850 million objects took ages is now fixed.</p>
			<p>An issue where the dominator tree calculation sometimes took ages is now fixed.</p>
			<p>There is a performance optimization in the retained set calculation</p>
		</section>
		<section>
			<title>New and Noteworthy for Memory Analyzer 1.2</title>
			<p>
				The New and Noteworthy document for version 1.2 is available 
				<xref format="html" href="http://www.eclipse.org/mat/1.2.0/noteworthy.html">here</xref>.
			</p>
		</section>

	</refbody>
</reference>