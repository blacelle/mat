<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="OQL in 1 minute">
   <intro href="/org.eclipse.mat.ui.help/html/46/9f7472517a52b6e10000000a155369/content.htm">
      <description>
         OQL is the build-in object query language. Learn to perform
			custom SQL-like queries on the heap dump in one minute.
      </description>
   </intro>
   <item title="Open the heap dump" dialog="true" skip="false">
      <description>
         Open a sample heap dump by activating the action link
			below.
      </description>
      <action class="org.eclipse.mat.ui.snapshot.actions.OpenSampleHeapDumpAction" pluginId="org.eclipse.mat.ui" confirm="false" param1="org.eclipse.mat.ui.help/heapdump/HeapDumpSample.hprof">
      </action>
   </item>
   <item title="FROM Clause" dialog="true" skip="true" href="/org.eclipse.mat.ui.help/html/46/a4d9daaee752b6e10000000a155369/content.htm">
      <description>
         Think of classes as tables, objects as rows, and fields as columns.
			<br/>
			<br/>
			<b>SELECT * FROM java.lang.ref.SoftReference</b>
			<br/>
			<br/> This query will return all soft reference objects. To include objects of
			subclasses, add the INSTANCEOF keyword:
			<br/>
			<br/>
			<b>SELECT * FROM INSTANCEOF java.lang.ref.Reference</b>
			<br/>
			<br/>
      </description>
      <action class="org.eclipse.mat.ui.snapshot.actions.OpenSampleHeapDumpAction" pluginId="org.eclipse.mat.ui" confirm="false" param1="org.eclipse.mat.ui.help/heapdump/HeapDumpSample.hprof" param2="oql" param3="SELECT * FROM java.lang.ref.SoftReference">
      </action>
   </item>
   <item title="WHERE Clause" dialog="true" skip="true" href="/org.eclipse.mat.ui.help/html/46/a4019b2cd752b7e10000000a155369/content.htm">
      <description>
         To conditionally select objects, a WHERE clause can be added to the
			SELECT statement:
			<br/>
			<br/>
			<b>SELECT * FROM java.lang.String s WHERE s.count &gt; 100</b>
			<br/>
			<br/> Possible operators are =, !=, &lt;, &lt;=, &gt;, &gt;= and LIKE. Fields can
			be addressed with dot notation to reach fields of a table alias or even fields of
			nested objects: &lt;field&gt;.&lt;field&gt;.&lt;field&gt;.
      </description>
      <action class="org.eclipse.mat.ui.snapshot.actions.OpenSampleHeapDumpAction" pluginId="org.eclipse.mat.ui" confirm="false" param1="org.eclipse.mat.ui.help/heapdump/HeapDumpSample.hprof" param2="oql" param3="SELECT * FROM java.lang.String s WHERE s.count > 100">
      </action>
   </item>
   <item title="SELECT Clause" dialog="true" skip="true" href="/org.eclipse.mat.ui.help/html/46/a4ff1a2cd752b7e10000000a155369/content.htm">
      <description>
         To select the content of specific fields, use a SELECT statement like
			this:
			<br/>
			<br/>
			<b>SELECT toHex(m.@objectAddress), m.size, m.table.@length,
				m.@retainedHeapSize FROM java.util.HashMap m</b>
			<br/>
			<br/> The
			<b>@</b> symbol denotes fields and methods (from the Java API) like
			objectAddress, usedHeapSize, retainedHeapSize, GCRootInfo and length (for
			arrays). Functions like toHex(), toString(), classof(), dominatorof() etc.
			allow simple transformations.
      </description>
      <action class="org.eclipse.mat.ui.snapshot.actions.OpenSampleHeapDumpAction" pluginId="org.eclipse.mat.ui" confirm="false" param1="org.eclipse.mat.ui.help/heapdump/HeapDumpSample.hprof" param2="oql" param3="SELECT toHex(m.@objectAddress), m.size, m.table.@length, m.@retainedHeapSize FROM java.util.HashMap m">
      </action>
   </item>
</cheatsheet>
