<?xml version='1.0' encoding='utf-8'?>

<?xml-stylesheet href="../../../xsl/dita2html_shell.xsl" type="text/xsl"?>
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA Reference//EN" "../../../dtd/reference.dtd" []>
<reference id="bnfofoql" xml:lang="en-us">
	<title>BNF for the Object Query Language</title>

	<refbody>
		<section>
		<simpletable  id="oql_table">
            <strow>
               <stentry><codeblock>SelectStatement</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>"SELECT" SelectList FromClause ( WhereClause )? ( UnionClause )?</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>SelectList</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>(( "DISTINCT" | "AS RETAINED SET" )? ( "*" | "OBJECTS" SelectItem | SelectItem ( "," SelectItem )* ))</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>SelectItem</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( PathExpression | EnvVarPathExpression ) ( "AS" ( &gt;STRING_LITERAL&lt; | &gt;IDENTIFIER&lt; ) )?&gt;/IDENTIFIER&lt;&gt;/STRING_LITERAL&lt;</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>PathExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( ObjectFacet | BuildInFunction ) ( "." ObjectFacet )*</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>EnvVarPathExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( "$" &gt;IDENTIFIER&lt; ) ( "." ObjectFacet )*</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ObjectFacet</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( ( "@" )? &gt;IDENTIFIER&lt; ( ParameterList )? )</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ParameterList</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>"(" ( ( PrimaryExpression ( "," PrimaryExpression )* ) )? ")"</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>FromClause</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>"FROM" ( "OBJECTS" )? ( "INSTANCEOF" )? ( FromItem | "(" SelectStatement ")" ) ( &gt;IDENTIFIER&lt; )?</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>FromItem</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( ClassName | &gt;STRING_LITERAL&lt; | ObjectAddress ( "," ObjectAddress )* | ObjectId ( "," ObjectId )* | EnvVarPathExpression )</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ClassName</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( &gt;IDENTIFIER&lt; ( "." &gt;IDENTIFIER&lt; )* ( "[]" )* )</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ObjectAddress</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>&gt;HEX_LITERAL&lt;</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ObjectId</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>&gt;INTEGER_LITERAL&lt;</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>WhereClause</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>"WHERE" ConditionalOrExpression</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ConditionalOrExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>ConditionalAndExpression ( "or" ConditionalAndExpression )*</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>ConditionalAndExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>EqualityExpression ( "and" EqualityExpression )*</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>EqualityExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>RelationalExpression ( ( "=" RelationalExpression | "!=" RelationalExpression ) )*</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>RelationalExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( PrimaryExpression ( ( "&gt;" PrimaryExpression | "&lt;" PrimaryExpression | "&gt;=" PrimaryExpression | "&lt;=" PrimaryExpression | ( LikeClause | InClause ) | "implements" ClassName ) )? )</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>LikeClause</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( "NOT" )? "LIKE" &gt;STRING_LITERAL&lt;</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>InClause</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( "NOT" )? "IN" PrimaryExpression</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>PrimaryExpression</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>Literal</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock> </codeblock></stentry>
               <stentry><codeblock>|</codeblock></stentry>
               <stentry><codeblock>"(" ( ConditionalOrExpression | SubQuery ) ")</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock> </codeblock></stentry>
               <stentry><codeblock>|</codeblock></stentry>
               <stentry><codeblock>PathExpression</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock> </codeblock></stentry>
               <stentry><codeblock>|</codeblock></stentry>
               <stentry><codeblock>EnvVarPathExpression</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>SubQuery</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>SelectStatement</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>Function</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( ( "toHex" | "toString" | "dominators" | "outbounds" | "inbounds" | "classof" | "dominatorof" ) "(" ConditionalOrExpression ")" )</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>Literal</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( &gt;INTEGER_LITERAL&lt; | &gt;LONG_LITERAL&lt; | &gt;FLOATING_POINT_LITERAL&lt; | &gt;CHARACTER_LITERAL&lt; | &gt;STRING_LITERAL&lt; | BooleanLiteral | NullLiteral )</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>BooleanLiteral</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>"true"</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock> </codeblock></stentry>
               <stentry><codeblock>|</codeblock></stentry>
               <stentry><codeblock>"false"</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>NullLiteral</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>&gt;NULL&lt;</codeblock></stentry>
            </strow>
            <strow>
               <stentry><codeblock>UnionClause</codeblock></stentry>
               <stentry><codeblock>::=</codeblock></stentry>
               <stentry><codeblock>( "UNION" "(" SelectStatement ")" )+</codeblock></stentry>
            </strow>          
        </simpletable>
		</section>
	</refbody>
</reference>