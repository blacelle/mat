
DominatorQuery.name = Dominator Tree
DominatorQuery.help = Open Dominator Tree for entire heap. The dominator tree shows keep-alive relationships between objects. \
All objects under a node are eligible for garbage collection once the node itself is eligible for garbage collection.
DominatorQuery.groupBy.help = Whether to group the objects in the resulting tree by class, classloader or by package.

ShowInDominatorQuery.name = Open In Dominator Tree
ShowInDominatorQuery.category = Java Basics
ShowInDominatorQuery.help = Open Dominator Tree for selected objects.
ShowInDominatorQuery.objects.help = Objects for which the dominator tree should be shown.
ShowInDominatorQuery.groupBy.help = Whether to group the objects in the resulting tree by class, classloader or by package.


Path2GCRootsQuery.name = exclude custom field...
Path2GCRootsQuery.category = 3|Path To GC Roots
Path2GCRootsQuery.menu.0.label = 1|with all references
Path2GCRootsQuery.menu.1.label = 2|exclude weak references
Path2GCRootsQuery.menu.2.label = 3|exclude soft references
Path2GCRootsQuery.menu.3.label = 4|exclude phantom references
Path2GCRootsQuery.menu.4.label = 5|exclude weak/soft references
Path2GCRootsQuery.menu.5.label = 6|exclude phantom/soft references
Path2GCRootsQuery.menu.6.label = 7|exclude phantom/weak references
Path2GCRootsQuery.menu.7.label = 8|exclude all phantom/weak/soft etc. references
Path2GCRootsQuery.help = Find paths to garbage collection roots from a single object. The paths show the reasons why \
this object is kept alive. \
The query only works for a single object.
Path2GCRootsQuery.object.help = Specification for a single object for which paths to garbage collection roots should be found.\n\
Do not use the class pattern unless the class just has a singleton instance.\n\
Do not use the OQL query unless it returns a single object.
Path2GCRootsQuery.excludes.help = Fields of certain classes which should be ignored when finding paths. \
For example this allows paths through Weak or Soft Reference referents to be ignored.
Path2GCRootsQuery.numberOfPaths.help = The number of different paths to be displayed.

MultiplePath2GCRootsQuery.name = exclude custom field...
MultiplePath2GCRootsQuery.category = 4|Merge Shortest Paths to GC Roots
MultiplePath2GCRootsQuery.menu.0.label = 1|with all references
MultiplePath2GCRootsQuery.menu.1.label = 2|exclude weak references
MultiplePath2GCRootsQuery.menu.2.label = 3|exclude soft references
MultiplePath2GCRootsQuery.menu.3.label = 4|exclude phantom references
MultiplePath2GCRootsQuery.menu.4.label = 5|exclude weak/soft references
MultiplePath2GCRootsQuery.menu.5.label = 6|exclude phantom/soft references
MultiplePath2GCRootsQuery.menu.6.label = 7|exclude phantom/weak references
MultiplePath2GCRootsQuery.menu.7.label = 8|exclude all phantom/weak/soft etc. references
MultiplePath2GCRootsQuery.help = Find common paths from garbage collection roots to an object or set of objects.
MultiplePath2GCRootsQuery.objects.help = Objects for which paths to garbage collection roots should be found.
MultiplePath2GCRootsQuery.excludes.help = Fields of certain classes which should be ignored when finding paths. \
For example this allows paths through Weak or Soft Reference referents to be ignored.
MultiplePath2GCRootsQuery.groupBy.help = Whether to show:\n\
merged paths from garbage collection roots to the objects\n\
merged paths from garbage collection roots to the objects grouped by class, so all objects of the same class are shown as one\n\
merged paths from objects to garbage collection roots grouped by class, so all objects of the same class are shown as one
