/* Generated By:JavaCC: Do not edit this line. OQLParser.java */
package org.eclipse.mat.parser.internal.oql.parser;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.mat.parser.internal.oql.ICompiler;
import org.eclipse.mat.parser.internal.oql.compiler.Attribute;
import org.eclipse.mat.parser.internal.oql.compiler.Expression;
import org.eclipse.mat.parser.internal.oql.compiler.Query;


public class OQLParser implements OQLParserConstants
{
    ICompiler compiler;

    public void setCompiler(ICompiler compiler)
    {
        this.compiler = compiler;
    }

    /***************************************************************************
     * THE OQL GRAMMAR STARTS HERE *
     **************************************************************************/
    final public Query ParseQuery() throws ParseException
    {
        Query q;
        q = SelectStatement();
        jj_consume_token(0);
        {
            if (true)
                return q;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Query ParseQueryFromInputLine() throws ParseException
    {
        Query q;
        q = SelectStatement();
        jj_consume_token(52);
        {
            if (true)
                return q;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Query SelectStatement() throws ParseException
    {
        Query q = new Query();
        jj_consume_token(K_SELECT);
        SelectList(q);
        FromClause(q);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_WHERE:
                WhereClause(q);
                break;
            default:
                jj_la1[0] = jj_gen;

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_UNION:
                UnionClause(q);
                break;
            default:
                jj_la1[1] = jj_gen;

        }
        {
            if (true)
                return q;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    /* ---------------- select --------------------- */
    final public void SelectList(Query q) throws ParseException
    {
        Query.SelectClause selectClause = new Query.SelectClause();
        List<Query.SelectItem> columns = new ArrayList<Query.SelectItem>();
        Query.SelectItem a;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_AS_RETAINED_SET:
            case K_DISTINCT:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                {
                    case K_DISTINCT:
                        jj_consume_token(K_DISTINCT);
                        selectClause.setDistinct(true);
                        break;
                    case K_AS_RETAINED_SET:
                        jj_consume_token(K_AS_RETAINED_SET);
                        selectClause.setRetainedSet(true);
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[3] = jj_gen;

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case 53:
                jj_consume_token(53);
                break;
            case K_OBJECTS:
                jj_consume_token(K_OBJECTS);
                a = SelectItem();
                columns.add(a);
                selectClause.setAsObjects(true);
                break;
            case DOLLAR_SIGN:
            case IDENTIFIER:
            case 56:
                a = SelectItem();
                columns.add(a);
                label_1: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case 54:

                            break;
                        default:
                            jj_la1[4] = jj_gen;
                            break label_1;
                    }
                    jj_consume_token(54);
                    a = SelectItem();
                    columns.add(a);
                }
                break;
            default:
                jj_la1[5] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        selectClause.setSelectList(columns);
        q.setSelectClause(selectClause);
    }

    final public Query.SelectItem SelectItem() throws ParseException
    {
        Object ex = null;
        Token t1 = null, t2 = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case IDENTIFIER:
            case 56:
                ex = PathExpression();
                break;
            case DOLLAR_SIGN:
                ex = EnvVarPathExpression();
                break;
            default:
                jj_la1[6] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_AS:
                jj_consume_token(K_AS);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                {
                    case STRING_LITERAL:
                        t1 = jj_consume_token(STRING_LITERAL);
                        break;
                    case IDENTIFIER:
                        t2 = jj_consume_token(IDENTIFIER);
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[8] = jj_gen;

        }
        String name = null;
        if (t1 != null)
            name = t1.image.substring(1, t1.image.length() - 1);
        else if (t2 != null)
            name = t2.image;

        {
            if (true)
                return new Query.SelectItem(name, (Expression) ex);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object PathExpression() throws ParseException
    {
        List<Object> elements = new ArrayList<Object>();
        Object ex = null;
        ex = ObjectFacet(true);
        elements.add(ex);
        label_2: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 55:

                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_2;
            }
            jj_consume_token(55);
            ex = ObjectFacet(false);
            elements.add(ex);
        }
        {
            if (true)
                return compiler.path(elements);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object EnvVarPathExpression() throws ParseException
    {
        LinkedList<Object> elements = new LinkedList<Object>();
        Object ex = null;
        Token t_name = null;
        jj_consume_token(DOLLAR_SIGN);
        t_name = jj_consume_token(IDENTIFIER);
        label_3: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 55:

                    break;
                default:
                    jj_la1[10] = jj_gen;
                    break label_3;
            }
            jj_consume_token(55);
            ex = ObjectFacet(false);
            elements.add(ex);
        }
        elements.addFirst(new Attribute(t_name.image, false, true));
        {
            if (true)
                return compiler.path(elements);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object ObjectFacet(boolean isFirstInPath) throws ParseException
    {
        Token t_native = null, t_name = null;
        List<Expression> parameters = null;
        Object ex = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case 56:
                t_native = jj_consume_token(56);
                break;
            default:
                jj_la1[11] = jj_gen;

        }
        t_name = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case 57:
                parameters = ParameterList();
                break;
            default:
                jj_la1[12] = jj_gen;

        }
        if (parameters != null)
            ex = compiler.method(t_name.image, parameters, isFirstInPath);
        else
            ex = new Attribute(t_name.image, t_native != null, false);
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public List<Expression> ParameterList() throws ParseException
    {
        List<Expression> parameters = new ArrayList<Expression>();
        Object expr = null;
        jj_consume_token(57);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case DOLLAR_SIGN:
            case IDENTIFIER:
            case 56:
            case 57:
            case 62:
            case 63:
                expr = SimpleExpression();
                parameters.add((Expression) expr);
                label_4: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case 54:

                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            break label_4;
                    }
                    jj_consume_token(54);
                    expr = SimpleExpression();
                    parameters.add((Expression) expr);
                }
                break;
            default:
                jj_la1[14] = jj_gen;

        }
        jj_consume_token(58);
        {
            if (true)
                return parameters;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    /* ---------------- from --------------------- */
    final public void FromClause(Query q) throws ParseException
    {
        Query.FromClause fromItem = new Query.FromClause();
        Query subSelect = null;

        Token t1 = null, t2 = null, t3 = null;
        jj_consume_token(K_FROM);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_OBJECTS:
                t1 = jj_consume_token(K_OBJECTS);
                break;
            default:
                jj_la1[15] = jj_gen;

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_INSTANCEOF:
                t2 = jj_consume_token(K_INSTANCEOF);
                break;
            default:
                jj_la1[16] = jj_gen;

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case HEX_LITERAL:
            case STRING_LITERAL:
            case DOLLAR_SIGN:
            case IDENTIFIER:
                FromItem(fromItem);
                break;
            case 57:
                jj_consume_token(57);
                subSelect = SelectStatement();
                jj_consume_token(58);
                break;
            default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case IDENTIFIER:
                t3 = jj_consume_token(IDENTIFIER);
                break;
            default:
                jj_la1[18] = jj_gen;

        }
        fromItem.setSubSelect(subSelect);

        fromItem.setIncludeObjects(t1 != null);
        fromItem.setIncludeSubClasses(t2 != null);

        if (t3 != null)
            fromItem.setAlias(t3.image);

        q.setFromClause(fromItem);
    }

    final public void FromItem(Query.FromClause fromClause) throws ParseException
    {
        Token t = null;
        Object expr = null;
        String className = null;
        long address = 0;
        int objectId = 0;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case IDENTIFIER:
                className = ClassName();
                fromClause.setClassName(className);
                break;
            case STRING_LITERAL:
                t = jj_consume_token(STRING_LITERAL);
                fromClause.setClassNamePattern(t.image.substring(1, t.image.length() - 1));
                break;
            case HEX_LITERAL:
                address = ObjectAddress();
                fromClause.addObjectAddress(address);
                label_5: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case 54:

                            break;
                        default:
                            jj_la1[19] = jj_gen;
                            break label_5;
                    }
                    jj_consume_token(54);
                    address = ObjectAddress();
                    fromClause.addObjectAddress(address);
                }
                break;
            case INTEGER_LITERAL:
                objectId = ObjectId();
                fromClause.addObjectId(objectId);
                label_6: while (true)
                {
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                    {
                        case 54:
                            break;
                        default:
                            jj_la1[20] = jj_gen;
                            break label_6;
                    }
                    jj_consume_token(54);
                    objectId = ObjectId();
                    fromClause.addObjectId(objectId);
                }
                break;
            case DOLLAR_SIGN:
                expr = EnvVarPathExpression();
                fromClause.setCall((Expression) expr);
                break;
            default:
                jj_la1[21] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public String ClassName() throws ParseException
    {
        StringBuilder b = new StringBuilder();
        Token t;
        t = jj_consume_token(IDENTIFIER);
        b.append(t.image);
        label_7: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 55:

                    break;
                default:
                    jj_la1[22] = jj_gen;
                    break label_7;
            }
            jj_consume_token(55);
            t = jj_consume_token(IDENTIFIER);
            b.append(".").append(t.image);
        }
        label_8: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 59:

                    break;
                default:
                    jj_la1[23] = jj_gen;
                    break label_8;
            }
            jj_consume_token(59);
            b.append("[]");
        }
        {
            if (true)
                return b.toString();
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public long ObjectAddress() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(HEX_LITERAL);
        {
            if (true)
                return new BigInteger(t.image.substring(2), 16).longValue();
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public int ObjectId() throws ParseException
    {
        Token t = null;
        t = jj_consume_token(INTEGER_LITERAL);
        {
            if (true)
                return Integer.parseInt(t.image);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    /* ---------------- where --------------------- */
    final public void WhereClause(Query q) throws ParseException
    {
        Object ex;
        jj_consume_token(K_WHERE);
        ex = ConditionalOrExpression();
        q.setWhereClause((Expression) ex);
    }

    final public Object ConditionalOrExpression() throws ParseException
    {
        Object ex, r;
        ArrayList<Object> list = null;
        ex = ConditionalAndExpression();
        label_9: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case OR:

                    break;
                default:
                    jj_la1[24] = jj_gen;
                    break label_9;
            }
            jj_consume_token(OR);
            r = ConditionalAndExpression();
            if (list == null)
            {
                list = new ArrayList<Object>();
                list.add(ex);
            }
            list.add(r);
        }
        if (list != null)
        {
            ex = compiler.or(list.toArray());
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object ConditionalAndExpression() throws ParseException
    {
        Object ex, r;
        ArrayList<Object> list = null;
        ex = EqualityExpression();
        label_10: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case AND:

                    break;
                default:
                    jj_la1[25] = jj_gen;
                    break label_10;
            }
            jj_consume_token(AND);
            r = EqualityExpression();
            if (list == null)
            {
                list = new ArrayList<Object>();
                list.add(ex);
            }
            list.add(r);
        }
        if (list != null)
        {
            ex = compiler.and(list.toArray());
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object EqualityExpression() throws ParseException
    {
        Object ex, r;
        ex = RelationalExpression();
        label_11: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case NE:
                case 60:

                    break;
                default:
                    jj_la1[26] = jj_gen;
                    break label_11;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 60:
                    jj_consume_token(60);
                    r = RelationalExpression();
                    ex = compiler.equal(ex, r);
                    break;
                case NE:
                    jj_consume_token(NE);
                    r = RelationalExpression();
                    ex = compiler.notEqual(ex, r);
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object RelationalExpression() throws ParseException
    {
        Object ex, r;
        ex = SimpleExpression();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_IN:
            case K_LIKE:
            case K_NOT:
            case IMPLEMENTS:
            case LT:
            case LE:
            case GE:
            case 61:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                {
                    case LT:
                        jj_consume_token(LT);
                        r = SimpleExpression();
                        ex = compiler.lessThan(ex, r);
                        break;
                    case 61:
                        jj_consume_token(61);
                        r = SimpleExpression();
                        ex = compiler.greaterThan(ex, r);
                        break;
                    case LE:
                        jj_consume_token(LE);
                        r = SimpleExpression();
                        ex = compiler.lessThanOrEqual(ex, r);
                        break;
                    case GE:
                        jj_consume_token(GE);
                        r = SimpleExpression();
                        ex = compiler.greaterThanOrEqual(ex, r);
                        break;
                    case K_IN:
                    case K_LIKE:
                    case K_NOT:
                        if (jj_2_1(2))
                        {
                            ex = LikeClause(ex);
                        }
                        else
                        {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                            {
                                case K_IN:
                                case K_NOT:
                                    ex = InClause(ex);
                                    break;
                                default:
                                    jj_la1[28] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                        }
                        break;
                    case IMPLEMENTS:
                        jj_consume_token(IMPLEMENTS);
                        r = ClassName();
                        ex = compiler.instanceOf(ex, (String) r);
                        break;
                    default:
                        jj_la1[29] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[30] = jj_gen;

        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object LikeClause(Object left) throws ParseException
    {
        Token t1 = null, t2 = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_NOT:
                t1 = jj_consume_token(K_NOT);
                break;
            default:
                jj_la1[31] = jj_gen;

        }
        jj_consume_token(K_LIKE);
        t2 = jj_consume_token(STRING_LITERAL);
        String pattern = t2.image.substring(1, t2.image.length() - 1);
        {
            if (true)
                return t1 == null ? compiler.like(left, pattern) : compiler.notLike(left, pattern);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object InClause(Object left) throws ParseException
    {
        Object r;
        Token t = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case K_NOT:
                t = jj_consume_token(K_NOT);
                break;
            default:
                jj_la1[32] = jj_gen;

        }
        jj_consume_token(K_IN);
        r = SimpleExpression();
        {
            if (true)
                return t == null ? compiler.in(left, r) : compiler.notIn(left, r);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object SimpleExpression() throws ParseException
    {
        Object ex, r;
        ex = MultiplicativeExpression();
        label_12: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 62:
                case 63:

                    break;
                default:
                    jj_la1[33] = jj_gen;
                    break label_12;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 62:
                    jj_consume_token(62);
                    r = MultiplicativeExpression();
                    ex = compiler.plus(ex, r);
                    break;
                case 63:
                    jj_consume_token(63);
                    r = MultiplicativeExpression();
                    ex = compiler.minus(ex, r);
                    break;
                default:
                    jj_la1[34] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object MultiplicativeExpression() throws ParseException
    {
        Object ex, r;
        ex = PrimaryExpression();
        label_13: while (true)
        {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 53:
                case 64:

                    break;
                default:
                    jj_la1[35] = jj_gen;
                    break label_13;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case 53:
                    jj_consume_token(53);
                    r = PrimaryExpression();
                    ex = compiler.multiply(ex, r);
                    break;
                case 64:
                    jj_consume_token(64);
                    r = PrimaryExpression();
                    ex = compiler.divide(ex, r);
                    break;
                default:
                    jj_la1[36] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object PrimaryExpression() throws ParseException
    {
        Object ex;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case 62:
            case 63:
                ex = Literal();
                {
                    if (true)
                        return ex;
                }
                break;
            case 57:
                jj_consume_token(57);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                {
                    case INTEGER_LITERAL:
                    case LONG_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case DOLLAR_SIGN:
                    case IDENTIFIER:
                    case 56:
                    case 57:
                    case 62:
                    case 63:
                        ex = ConditionalOrExpression();
                        break;
                    case K_SELECT:
                        ex = SubQuery();
                        break;
                    default:
                        jj_la1[37] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(58);
                {
                    if (true)
                        return ex;
                }
                break;
            case IDENTIFIER:
            case 56:
                ex = PathExpression();
                {
                    if (true)
                        return ex;
                }
                break;
            case DOLLAR_SIGN:
                ex = EnvVarPathExpression();
                {
                    if (true)
                        return ex;
                }
                break;
            default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object SubQuery() throws ParseException
    {
        Query q;
        q = SelectStatement();
        {
            if (true)
                return compiler.subQuery(q);
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object Literal() throws ParseException
    {
        Object ex;
        Token t;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
            case LONG_LITERAL:
            case FLOATING_POINT_LITERAL:
            case 62:
            case 63:
                ex = NumberLiteral();
                break;
            case CHARACTER_LITERAL:
                t = jj_consume_token(CHARACTER_LITERAL);
                ex = compiler.literal(Character.valueOf(t.image.charAt(1)));
                break;
            case STRING_LITERAL:
                t = jj_consume_token(STRING_LITERAL);
                ex = compiler.literal(t.image.substring(1, t.image.length() - 1));
                break;
            case TRUE:
            case FALSE:
                ex = BooleanLiteral();
                break;
            case NULL:
                ex = NullLiteral();
                break;
            default:
                jj_la1[39] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object NumberLiteral() throws ParseException
    {
        Object ex;
        Token t, unary = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case 62:
            case 63:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
                {
                    case 62:
                        unary = jj_consume_token(62);
                        break;
                    case 63:
                        unary = jj_consume_token(63);
                        break;
                    default:
                        jj_la1[40] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[41] = jj_gen;

        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case INTEGER_LITERAL:
                t = jj_consume_token(INTEGER_LITERAL);
                int anInt = Integer.parseInt(t.image);
                if (unary != null && "-".equals(unary.image))
                    anInt *= -1;

                ex = compiler.literal(anInt);
                break;
            case LONG_LITERAL:
                t = jj_consume_token(LONG_LITERAL);
                long aLong = Long.parseLong(t.image.substring(0, t.image.length() - 1));
                if (unary != null && "-".equals(unary.image))
                    aLong *= -1;

                ex = compiler.literal(aLong);
                break;
            case FLOATING_POINT_LITERAL:
                t = jj_consume_token(FLOATING_POINT_LITERAL);
                float aFloat = Float.parseFloat(t.image);
                if (unary != null && "-".equals(unary.image))
                    aFloat *= -1;

                ex = compiler.literal(aFloat);
                break;
            default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true)
                return ex;
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object BooleanLiteral() throws ParseException
    {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
        {
            case TRUE:
                jj_consume_token(TRUE);
                {
                    if (true)
                        return compiler.literal(Boolean.TRUE);
                }
                break;
            case FALSE:
                jj_consume_token(FALSE);
                {
                    if (true)
                        return compiler.literal(Boolean.FALSE);
                }
                break;
            default:
                jj_la1[43] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new RuntimeException("Missing return statement in function");
    }

    final public Object NullLiteral() throws ParseException
    {
        jj_consume_token(NULL);
        {
            if (true)
                return compiler.nullLiteral();
        }
        throw new RuntimeException("Missing return statement in function");
    }

    /* ---------------- union --------------------- */
    final public void UnionClause(Query q) throws ParseException
    {
        Query unionQuery = null;
        label_14: while (true)
        {
            jj_consume_token(K_UNION);
            jj_consume_token(57);
            unionQuery = SelectStatement();
            jj_consume_token(58);
            q.addUnionQuery(unionQuery);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk)
            {
                case K_UNION:

                    break;
                default:
                    jj_la1[44] = jj_gen;
                    break label_14;
            }
        }
    }

    final private boolean jj_2_1(int xla)
    {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try
        {
            return !jj_3_1();
        }
        catch (LookaheadSuccess ls)
        {
            return true;
        }
        finally
        {
            jj_save(0, xla);
        }
    }

    final private boolean jj_3R_15()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(21))
            jj_scanpos = xsp;
        if (jj_scan_token(K_LIKE))
            return true;
        if (jj_scan_token(STRING_LITERAL))
            return true;
        return false;
    }

    final private boolean jj_3_1()
    {
        if (jj_3R_15())
            return true;
        return false;
    }

    public OQLParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    public boolean lookingAhead = false;
    @SuppressWarnings("unused")
    private boolean jj_semLA;
    private int jj_gen;
    final private int[] jj_la1 = new int[45];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static
    {
        jj_la1_0();
        jj_la1_1();
        jj_la1_2();
    }

    private static void jj_la1_0()
    {
        jj_la1_0 = new int[] { 0x4000000, 0x2000000, 0x14000, 0x14000, 0x0, 0x400000, 0x0, 0x0, 0x2000, 0x0, 0x0, 0x0,
                        0x0, 0x0, 0x18000000, 0x400000, 0x40000, 0x48000000, 0x0, 0x0, 0x0, 0x48000000, 0x0, 0x0, 0x0,
                        0x0, 0x0, 0x0, 0x220000, 0x320000, 0x320000, 0x200000, 0x200000, 0x0, 0x0, 0x0, 0x0,
                        0x19000000, 0x18000000, 0x18000000, 0x0, 0x0, 0x18000000, 0x0, 0x2000000, };
    }

    private static void jj_la1_1()
    {
        jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x400000, 0x1200c00, 0x1000c00, 0x808, 0x0, 0x800000, 0x800000,
                        0x1000000, 0x2000000, 0x400000, 0xc3000d3d, 0x0, 0x0, 0x2000c08, 0x800, 0x400000, 0x400000,
                        0xc08, 0x800000, 0x8000000, 0x40, 0x80, 0x10080000, 0x10080000, 0x0, 0x20064200, 0x20064200,
                        0x0, 0x0, 0xc0000000, 0xc0000000, 0x200000, 0x200000, 0xc3000d3d, 0xc3000d3d, 0xc000013d,
                        0xc0000000, 0xc0000000, 0x1, 0x30, 0x0, };
    }

    private static void jj_la1_2()
    {
        jj_la1_2 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
                        0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, };
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[1];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    public OQLParser(java.io.InputStream stream)
    {
        this(stream, null);
    }

    public OQLParser(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e);
        }
        token_source = new OQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 45; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.InputStream stream)
    {
        ReInit(stream, null);
    }

    public void ReInit(java.io.InputStream stream, String encoding)
    {
        try
        {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        }
        catch (java.io.UnsupportedEncodingException e)
        {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 45; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public OQLParser(java.io.Reader stream)
    {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new OQLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 45; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(java.io.Reader stream)
    {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 45; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public OQLParser(OQLParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 45; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    public void ReInit(OQLParserTokenManager tm)
    {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 45; i++)
            jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++)
            jj_2_rtns[i] = new JJCalls();
    }

    final private Token jj_consume_token(int kind) throws ParseException
    {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind)
        {
            jj_gen++;
            if (++jj_gc > 100)
            {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++)
                {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null)
                    {
                        if (c.gen < jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.RuntimeException
    {}

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    final private boolean jj_scan_token(int kind)
    {
        if (jj_scanpos == jj_lastpos)
        {
            jj_la--;
            if (jj_scanpos.next == null)
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            }
            else
            {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        }
        else
        {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan)
        {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos)
            {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind)
            return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos)
            throw jj_ls;
        return false;
    }

    final public Token getNextToken()
    {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index)
    {
        Token t = lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++)
        {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = token_source.getNextToken();
        }
        return t;
    }

    final private int jj_ntk()
    {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    @SuppressWarnings("unchecked")
    private java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    @SuppressWarnings("unchecked")
    private void jj_add_error_token(int kind, int pos)
    {
        if (pos >= 100)
            return;
        if (pos == jj_endpos + 1)
        {
            jj_lasttokens[jj_endpos++] = kind;
        }
        else if (jj_endpos != 0)
        {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++)
            {
                jj_expentry[i] = jj_lasttokens[i];
            }
            boolean exists = false;
            for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();)
            {
                int[] oldentry = (int[]) (e.nextElement());
                if (oldentry.length == jj_expentry.length)
                {
                    exists = true;
                    for (int i = 0; i < jj_expentry.length; i++)
                    {
                        if (oldentry[i] != jj_expentry[i])
                        {
                            exists = false;
                            break;
                        }
                    }
                    if (exists)
                        break;
                }
            }
            if (!exists)
                jj_expentries.addElement(jj_expentry);
            if (pos != 0)
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    @SuppressWarnings("unchecked")
    public ParseException generateParseException()
    {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[65];
        if (jj_kind >= 0)
        {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 45; i++)
        {
            if (jj_la1[i] == jj_gen)
            {
                for (int j = 0; j < 32; j++)
                {
                    if ((jj_la1_0[i] & (1 << j)) != 0)
                    {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0)
                    {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0)
                    {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 65; i++)
        {
            if (la1tokens[i])
            {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++)
        {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing()
    {}

    final public void disable_tracing()
    {}

    final private void jj_rescan_token()
    {
        jj_rescan = true;
        for (int i = 0; i < 1; i++)
        {
            try
            {
                JJCalls p = jj_2_rtns[i];
                do
                {
                    if (p.gen > jj_gen)
                    {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i)
                        {
                            case 0:
                                jj_3_1();
                                break;
                        }
                    }
                    p = p.next;
                }
                while (p != null);
            }
            catch (LookaheadSuccess ls)
            {
                // $JL-EXC$
                // javacc generated code
            }
        }
        jj_rescan = false;
    }

    final private void jj_save(int index, int xla)
    {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen)
        {
            if (p.next == null)
            {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls
    {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

    // public static void main( String args[] ) throws ParseException
    // {
    // System.out.println("Reading from stdin");
    // OQLParser p = new OQLParser(System.in);
    // p.setCompiler(new
    // org.eclipse.mat.internal.snapshot.oql.compiler.CompilerImpl());
    // Query q = p.ParseQueryFromInputLine();
    // System.out.println(q);
    //        
    // System.out.println("Parse Successfull") ;
    // }
}
