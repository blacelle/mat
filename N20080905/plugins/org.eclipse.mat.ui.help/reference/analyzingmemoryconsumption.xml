<?xml version='1.0' encoding='utf-8'?>

<?xml-stylesheet href="../../../xsl/dita2html_shell.xsl" type="text/xsl"?>
<!DOCTYPE reference PUBLIC "-//IBM//DTD DITA Reference//EN" "../../../dtd/reference.dtd" []>
<reference id="analyzingmemoryconsumption" xml:lang="en-us">
	<title>Analyzing Memory Consumption</title>
	<shortdesc />

	<prolog />

	<refbody>
		<section>
			<p>
				You analyze the heap dumps to find areas for
				optimization:
			</p>
			<simpletable relcolwidth="2* 3*"
				id="analyzingmemoryconsumptiontable">
				<strow>
					<stentry>Class Histogram</stentry>
					<stentry>
							Memory Analyzer provides a developer with a
							possibility to focus on a particular piece
							of code. by using filters in the Class
							Histogram:
							<image href="../mimes/7507ab60.png" align="left" placement="break"/>
					</stentry>
				</strow>
				<strow>
					<stentry>Immediate Dominators</stentry>
					<stentry>
							When you have found a suspect, that consumes
							a lot of memory, you can use the dominators
							query to find out what keeps this suspect in
							memory. With this query you can also skip
							the dominators that are of no interest for
							you, e.g.
							<cmdname>java.*</cmdname>
							packages:

						<image href="../mimes/m317da505.png" align="left" placement="break" />
					</stentry>
				</strow>
				<strow>
					<stentry>OQL</stentry>
					<stentry>
						<p>
							The two most common ways to "waste" memory
							are:
						</p>
						<ul>
							<li>
								Inefficient use of data structures, like
								keeping millions of empty lists or
								HashMaps. With OQL you can easily find
								e.g. all instances of ArrayList which
								are empty and have never been modified:
								<codeblock>SELECT * FROM java.util.ArrayList WHERE size=0 AND modCount=0</codeblock>
							</li>
							<li>
								A lot of redundant data, e.g. redundant
								<cmdname>Strings</cmdname>
								or
								<cmdname>char[]</cmdname>
								. Below you can find two examples of OQL
								queries to operate with Strings:
								<codeblock>SELECT * FROM java.lang.String s WHERE s.count &gt;= 100</codeblock>
								<codeblock>SELECT * FROM java.lang.String s WHERE toString(s) LIKE ".*day"</codeblock>
							</li>
						</ul>
					</stentry>
				</strow>
			</simpletable>
		</section>
	</refbody>
</reference>